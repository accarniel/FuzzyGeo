{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the VSpal's Documentation! # Download Source code We are currently working on making VSpal publicly available at its GitHub page . To cite the Vague Spatial Data Library (VSpal), please mention its conceptual paper: Carniel, A. C.; Schneider, M. Spatial Plateau Algebra: An Executable Type System for Fuzzy Spatial Data Types. In Proceedings of the 2018 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE 2018), p. 1-8, 2018. NEWS # a library in R for creating fuzzy region objects as plateau region objects from real data sets. It is fully described, with examples, here . Overview # VSpal (short for Vague Spatial Data Library ) is a C library with the following goal: to provide a common environment for manipulating vague spatial data based on distinct representating models, such as exact models and fuzzy set theory. We are working on making VSpal publicly available. It will provide support for vague spatial data types and their operations based on the Vague Spatial Algebra . Currently, there is one implementation based on this algebra, called VagueGeometry . Our intention is to provide the underlying implementation of VagueGeometry into VSPal. provide support for plateau spatial data types and their operations based on the Plateau Spatial Algebra . This algebra defines an implementation concept for fuzzy spatial data types and their operations reusing exiting implementations of crisp spatial algebras. provide support for fuzzy spatial data types and their operations based on the Fuzzy Spatial Algebra . This is a future work that we are currently working on. What are vague (fuzzy) spatial objects? # Current spatial database systems and GIS almost exclusively process crisp spatial objects. These are characterized by precisely determined, exact, and homogeneous geometries in the Euclidean plane and have been standardized by means of spatial data types for two-dimensional point, line, and region objects. The assumption of crisp boundaries and homogeneous interiors of spatial objects harmonizes very well with their internal representation and processing in a computer favoring precise and unique data structures. Examples of spatial objects are the locations of hydrants, power poles, traffic signs, and ATMs represented as crisp point objects, the routes of highways, streets, guardrails, and rivers modeled as crisp line objects, and the extents of countries, cities, districts, buildings, houses, and airports shaped as crisp region objects. While man-made spatial objects nicely accommodate with their modeling as crisp entities, many natural, social, and scientific phenomena reveal an inherently imprecise, blurred, vague, and fuzzy nature but have so far been artificially pressed into a crisp representation and modeling scheme. Geoscientists have shown the need of and their interest in representing spatial vagueness (fuzziness) due to the inadequacy of crisp modeling techniques. Spatial fuzziness captures the property of many spatial objects in reality that reveal an intrinsically vague or blurred nature and feature indeterminate boundaries and/or interiors; we call such entities vague (fuzzy) spatial objects . A spatial object is fuzzy if locations exist that cannot be assigned completely to the object or to its complement. Examples are natural, social, and cultural phenomena like land features with continuously changing properties (e.g., population density, soil strata, soil quality, vegetation, pollution, temperature, air pressure), lakes, oceans, deserts, and English speaking areas. As another example, the transition between a valley and a mountain cannot be exactly ascertained since it is smooth and seamless and both objects are hence not crisp. Features # Currently, VSpal provides a first version of the implementation of the Vague Spatial Algebra. In addition, it provides a method for creating fuzzy region objects as plateau region objects from real data sets. This method is implemented in R and available here .","title":"Home"},{"location":"#welcome_to_the_vspals_documentation","text":"Download Source code We are currently working on making VSpal publicly available at its GitHub page . To cite the Vague Spatial Data Library (VSpal), please mention its conceptual paper: Carniel, A. C.; Schneider, M. Spatial Plateau Algebra: An Executable Type System for Fuzzy Spatial Data Types. In Proceedings of the 2018 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE 2018), p. 1-8, 2018.","title":"Welcome to the VSpal's Documentation!"},{"location":"#news","text":"a library in R for creating fuzzy region objects as plateau region objects from real data sets. It is fully described, with examples, here .","title":"NEWS"},{"location":"#overview","text":"VSpal (short for Vague Spatial Data Library ) is a C library with the following goal: to provide a common environment for manipulating vague spatial data based on distinct representating models, such as exact models and fuzzy set theory. We are working on making VSpal publicly available. It will provide support for vague spatial data types and their operations based on the Vague Spatial Algebra . Currently, there is one implementation based on this algebra, called VagueGeometry . Our intention is to provide the underlying implementation of VagueGeometry into VSPal. provide support for plateau spatial data types and their operations based on the Plateau Spatial Algebra . This algebra defines an implementation concept for fuzzy spatial data types and their operations reusing exiting implementations of crisp spatial algebras. provide support for fuzzy spatial data types and their operations based on the Fuzzy Spatial Algebra . This is a future work that we are currently working on.","title":"Overview"},{"location":"#what_are_vague_fuzzy_spatial_objects","text":"Current spatial database systems and GIS almost exclusively process crisp spatial objects. These are characterized by precisely determined, exact, and homogeneous geometries in the Euclidean plane and have been standardized by means of spatial data types for two-dimensional point, line, and region objects. The assumption of crisp boundaries and homogeneous interiors of spatial objects harmonizes very well with their internal representation and processing in a computer favoring precise and unique data structures. Examples of spatial objects are the locations of hydrants, power poles, traffic signs, and ATMs represented as crisp point objects, the routes of highways, streets, guardrails, and rivers modeled as crisp line objects, and the extents of countries, cities, districts, buildings, houses, and airports shaped as crisp region objects. While man-made spatial objects nicely accommodate with their modeling as crisp entities, many natural, social, and scientific phenomena reveal an inherently imprecise, blurred, vague, and fuzzy nature but have so far been artificially pressed into a crisp representation and modeling scheme. Geoscientists have shown the need of and their interest in representing spatial vagueness (fuzziness) due to the inadequacy of crisp modeling techniques. Spatial fuzziness captures the property of many spatial objects in reality that reveal an intrinsically vague or blurred nature and feature indeterminate boundaries and/or interiors; we call such entities vague (fuzzy) spatial objects . A spatial object is fuzzy if locations exist that cannot be assigned completely to the object or to its complement. Examples are natural, social, and cultural phenomena like land features with continuously changing properties (e.g., population density, soil strata, soil quality, vegetation, pollution, temperature, air pressure), lakes, oceans, deserts, and English speaking areas. As another example, the transition between a valley and a mountain cannot be exactly ascertained since it is smooth and seamless and both objects are hence not crisp.","title":"What are vague (fuzzy) spatial objects?"},{"location":"#features","text":"Currently, VSpal provides a first version of the implementation of the Vague Spatial Algebra. In addition, it provides a method for creating fuzzy region objects as plateau region objects from real data sets. This method is implemented in R and available here .","title":"Features"},{"location":"contact/","text":"For general and technical questions: contact Anderson C. Carniel by email Please make a Pull Request to add suggestions for improving and/or extending VSpal in our GitHub page .","title":"Contact"},{"location":"publications/","text":"Vague Spatial Algebra (VASA) # VASA is deeply described in the following article: Pauly, A.; Schneider, M. VASA: An Algebra For Vague Spatial Data in Databases 35 (1), p. 111-138, 2010. VagueGeometry is an implementation of VASA for the PostgreSQL, as described in: Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. The VagueGeometry Abstract Data Type. Journal of Information and Data Management 7 (1), p. 18-34, 2016. Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. Embedding Vague Spatial Objects into Spatial Databases using the VagueGeometry Abstract Data Type. In Proceedings of the XVI Brazilian Symposium on GeoInformatics (GEOINFO 2015), p. 233-244, 2015. Plateau Spatial Algebra (SPA) # SPA is firstly introduced by the following article: Schneider, M. Spatial Plateau Algebra for Implementing Fuzzy Spatial objects in Databases and GIS: Spatial Plateau Data Types and Operations. Applied Soft Computing 16 (3), p. 148-170, 2014. Then, SPA has been extended in: Carniel, A. C.; Schneider, M. Spatial Plateau Algebra: An Executable Type System for Fuzzy Spatial Data Types. In Proceedings of the 2018 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE 2018), p. 1-8, 2018. Fuzzy Spatial Algebra (FUSA) # FUSA has been introduced by the following papers: Carniel, A. C.; Schneider, M. Coverage Degree-Based Fuzzy Topological Relationships for Fuzzy Regions. In Proceedings of the 2017 International Conference on Flexible Query Answering Systems (FQAS 2017), p. 112-123, 2017. Carniel, A. C.; Schneider, M. A Conceptual Model of Fuzzy Topological Relationships for Fuzzy Regions. In Proceedings of the 2016 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE 2016), p. 2271-2278, 2016. Carniel, A. C.; Schneider, M.; Ciferri, R. R; Ciferri, C. D. A. Modeling Fuzzy Topological Predicates for Fuzzy Regions. In Proceedings of the 22 nd ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems (ACM SIGSPATIAL 2014),p. 529-532, 2014. There is also an existing implementation of fuzzy point objects and fuzzy line objects, such as described in: Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. Handling Fuzzy Points and Fuzzy Lines using the FuzzyGeometry Abstract Data Type. Journal of Information and Data Management 7 (1), p. 35-51, 2016. Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. An Abstract Data Type to Handle Vague Spatial Objects Based on the Fuzzy Model. In Proceedings of the XVI Brazilian Symposium on GeoInformatics (GEOINFO 2015), p. 210-221, 2015. The applicability of fuzzy spatial objects has been studied in: Carniel, A. C.; Schneider, M. Fuzzy Inference on Fuzzy Spatial Objects (FIFUS) for Spatial Decision Support Systems. In Proceedings of the 2017 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE 2017), p. 1-6, 2017 Carniel, A. C.; Schneider, M.; Ciferri, R. R. FIFUS: A Rule-based Fuzzy Inference Model for Fuzzy Spatial Objects in Spatial Databases and GIS. In Proceedings of the 23 rd SIGSPATIAL International Conference on Advances in Geographic Information Systems (ACM SIGSPATIAL 2015), p. 83:1-83:4, 2015.","title":"Publications"},{"location":"publications/#vague_spatial_algebra_vasa","text":"VASA is deeply described in the following article: Pauly, A.; Schneider, M. VASA: An Algebra For Vague Spatial Data in Databases 35 (1), p. 111-138, 2010. VagueGeometry is an implementation of VASA for the PostgreSQL, as described in: Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. The VagueGeometry Abstract Data Type. Journal of Information and Data Management 7 (1), p. 18-34, 2016. Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. Embedding Vague Spatial Objects into Spatial Databases using the VagueGeometry Abstract Data Type. In Proceedings of the XVI Brazilian Symposium on GeoInformatics (GEOINFO 2015), p. 233-244, 2015.","title":"Vague Spatial Algebra (VASA)"},{"location":"publications/#plateau_spatial_algebra_spa","text":"SPA is firstly introduced by the following article: Schneider, M. Spatial Plateau Algebra for Implementing Fuzzy Spatial objects in Databases and GIS: Spatial Plateau Data Types and Operations. Applied Soft Computing 16 (3), p. 148-170, 2014. Then, SPA has been extended in: Carniel, A. C.; Schneider, M. Spatial Plateau Algebra: An Executable Type System for Fuzzy Spatial Data Types. In Proceedings of the 2018 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE 2018), p. 1-8, 2018.","title":"Plateau Spatial Algebra (SPA)"},{"location":"publications/#fuzzy_spatial_algebra_fusa","text":"FUSA has been introduced by the following papers: Carniel, A. C.; Schneider, M. Coverage Degree-Based Fuzzy Topological Relationships for Fuzzy Regions. In Proceedings of the 2017 International Conference on Flexible Query Answering Systems (FQAS 2017), p. 112-123, 2017. Carniel, A. C.; Schneider, M. A Conceptual Model of Fuzzy Topological Relationships for Fuzzy Regions. In Proceedings of the 2016 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE 2016), p. 2271-2278, 2016. Carniel, A. C.; Schneider, M.; Ciferri, R. R; Ciferri, C. D. A. Modeling Fuzzy Topological Predicates for Fuzzy Regions. In Proceedings of the 22 nd ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems (ACM SIGSPATIAL 2014),p. 529-532, 2014. There is also an existing implementation of fuzzy point objects and fuzzy line objects, such as described in: Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. Handling Fuzzy Points and Fuzzy Lines using the FuzzyGeometry Abstract Data Type. Journal of Information and Data Management 7 (1), p. 35-51, 2016. Carniel, A. C.; Ciferri, R. R.; Ciferri, C. D. A. An Abstract Data Type to Handle Vague Spatial Objects Based on the Fuzzy Model. In Proceedings of the XVI Brazilian Symposium on GeoInformatics (GEOINFO 2015), p. 210-221, 2015. The applicability of fuzzy spatial objects has been studied in: Carniel, A. C.; Schneider, M. Fuzzy Inference on Fuzzy Spatial Objects (FIFUS) for Spatial Decision Support Systems. In Proceedings of the 2017 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE 2017), p. 1-6, 2017 Carniel, A. C.; Schneider, M.; Ciferri, R. R. FIFUS: A Rule-based Fuzzy Inference Model for Fuzzy Spatial Objects in Spatial Databases and GIS. In Proceedings of the 23 rd SIGSPATIAL International Conference on Advances in Geographic Information Systems (ACM SIGSPATIAL 2015), p. 83:1-83:4, 2015.","title":"Fuzzy Spatial Algebra (FUSA)"},{"location":"building_fuzzy_regions/building_plateau_regions/","text":"Constructing Plateau Region Objects from Real Data Sets # Overview # Here, we provide a systematic and generic approach to the general issue of collecting and constructing fuzzy region objects as plateau region objects from real data sets and leveraging domain expert knowledge. This method is implemented as R functions. Given a set of crisp points, each of which is assigned some kind of alphanumerical value of a given application context, we show with the aid of domain expert knowledge how to extract plateau regions that represent different nuances of the data set. This two-stage extraction method provides a flexible algorithm for users and enables the user employs the most appropriate policies for a given application situation. The two stages of our method are: Fuzzification Stage Construction Stage Fuzzification Stage # This stage consists of the application of well-known techniques from fuzzy set theory to assign membership degrees to each point of a given point data set. Hence, the technique to be employed is a parameter of this stage in the form of a fuzzification policy . In our implementation, we provide the following policies: Fuzzy Set Policy Fuzzy Clustering Policy Fuzzy Classification Policy Fuzzy Set Policy # This policy is implemented by the function fuzzysetpolicy , which has the following required parameters: data : It is a data frame composed of three columns, x , y , and z . The columns x and y defines the point of the geographical location, whereas z specifies the numerical value associated to the point. classes : It is a list of strings containing the name of the classes in which the points may represent. That is, what are the possible representations that the fuzzy phenomenon can assume. Each class represents a fuzzy set in fuzzysets . For instance, the class in the position 0, represents the fuzzy set in the position 0 in fuzzysets . fuzzysets : It is a list of fuzzy sets represented as fuzzy numbers. The fuzzy number is represented by the R package FuzzyNumbers . Each fuzzy set represents a possible characterization (class) of the fuzzy phenomenon and its meanings is identified by a corresponding entry in classes . This policy returns a data frame containing the following columns: x and y are the same points from the data . i columns of numerical values, where i is the number of classes contained in fuzzysets and classes . The name of these columns are the names contained in classes . Each column has the membership point of ( x , y ) at the corresponding fuzzy number representing the class. Fuzzy Clustering Policy # This policy is implemented by the function fuzzyclusteringpolicy , which has the following required parameters: data : It is a data frame composed of three columns, x , y , and z . The columns x and y defines the point of the geographical location, whereas z specifies the numerical value associated to the point. method : It defines the fuzzy clustering algorithm to be employed in the policy. Currently, it can only assume the following values: (i) cmeans , which specifies the use of the fuzzy c-means , and (ii) cshell , which specifies the use of the fuzzy c-shell . These methods are implemented by the R package e1071 . sclus : It is a Boolean value that specifies whether the coordinates x and y are also used by the fuzzy clustering algorithm ( true ) or not ( false ). k : It specifies the number of groups to be created. iter : The number of iterations to be processed by the fuzzy clustering algorithm. This policy returns a data frame containing the following columns: x and y are the same points from the data . k columns of numerical values, where k is the number of groups specifies when executing the policy. The user should analyze the returning data in order to specify the meaning of each group. Fuzzy Classification Policy # To be specified. Construction Stage # The construction stage integrates the result obtained by the execution of the fuzzification stage with the application of spatial algorithms to group points with similar characteristics. This integration leads to the creation of plateau region objects. In our implementation, we provide the following policies: Voronoi Diagram Policy Delaunay Triangulation Policy Convex Hull Policy Voronoi Diagram Policy # This policy is implemented by the function voronoidiagrampolicy (with dependency of the R packages deldir , sp , and rgeos ), which has the following required parameters: lp : It is the data frame returned by a fuzzification policy of the fuzzification stage. Therefore, the structure of this data frame should not be modified (but you can modifiy, for example, the name of the columns). c : It consists of a list of classes that identicates the meaning of each column, after the columns x and y , of the lp . For instance, it corresponds to classes if you use the fuzzy set policy, and it corresponds to the name of the generated k groups of the fuzzy clustering policy. basepoly : It specifies the polygon in which the points are contained. It is employed to establish the boundary limits of the voronoi cells. refin : It specifies if the voronoi cells should be inside the basepoly only ( false ). Otherwise ( true and its default value), the voronoi cell intersecting the basepoly are refined by using the intersection operation between the voronoi cell and the basepoly ; it may require more processing time. This policy returns a matrix containing the following columns: c is the same classes specified by c . another column that represents the plateau region object representing a specific class. Delaunay Triangulation Policy # This policy is implemented by the function delaunaytriangulationpolicy (with dependency of the R packages deldir , sp , which has the following required parameters: lp : It is the data frame returned by a fuzzification policy of the fuzzification stage. Therefore, the structure of this data frame should not be modified (but you can modifiy, for example, the name of the columns). c : It consists of a list of classes that identicates the meaning of each column, after the columns x and y , of the lp . For instance, it corresponds to classes if you use the fuzzy set policy, and it corresponds to the name of the generated k groups of the fuzzy clustering policy. basepoly : It specifies the polygon in which the points are contained. It is employed to establish the boundary limits of the triangles. refin : It specifies if the triangles should be inside the basepoly only ( false ). Otherwise ( true and its default value), the triangles intersecting the basepoly are refined by using the intersection operation between the voronoi cell and the basepoly ; it may require more processing time. This policy returns a matrix containing the following columns: c is the same classes specified by c . another column that represents the plateau region object representing a specific class. Convex Hull Policy # To be specified. Running Example # We have employed this implementation to extract plateau region objects from a real-world data set representing the average temperature for the year 1970-2000. This data set can be downloaded at World Clim Version 2 . We are preparing the step-by-step of this running example.","title":"Building Fuzzy Regions"},{"location":"building_fuzzy_regions/building_plateau_regions/#constructing_plateau_region_objects_from_real_data_sets","text":"","title":"Constructing Plateau Region Objects from Real Data Sets"},{"location":"building_fuzzy_regions/building_plateau_regions/#overview","text":"Here, we provide a systematic and generic approach to the general issue of collecting and constructing fuzzy region objects as plateau region objects from real data sets and leveraging domain expert knowledge. This method is implemented as R functions. Given a set of crisp points, each of which is assigned some kind of alphanumerical value of a given application context, we show with the aid of domain expert knowledge how to extract plateau regions that represent different nuances of the data set. This two-stage extraction method provides a flexible algorithm for users and enables the user employs the most appropriate policies for a given application situation. The two stages of our method are: Fuzzification Stage Construction Stage","title":"Overview"},{"location":"building_fuzzy_regions/building_plateau_regions/#fuzzification_stage","text":"This stage consists of the application of well-known techniques from fuzzy set theory to assign membership degrees to each point of a given point data set. Hence, the technique to be employed is a parameter of this stage in the form of a fuzzification policy . In our implementation, we provide the following policies: Fuzzy Set Policy Fuzzy Clustering Policy Fuzzy Classification Policy","title":"Fuzzification Stage"},{"location":"building_fuzzy_regions/building_plateau_regions/#fuzzy_set_policy","text":"This policy is implemented by the function fuzzysetpolicy , which has the following required parameters: data : It is a data frame composed of three columns, x , y , and z . The columns x and y defines the point of the geographical location, whereas z specifies the numerical value associated to the point. classes : It is a list of strings containing the name of the classes in which the points may represent. That is, what are the possible representations that the fuzzy phenomenon can assume. Each class represents a fuzzy set in fuzzysets . For instance, the class in the position 0, represents the fuzzy set in the position 0 in fuzzysets . fuzzysets : It is a list of fuzzy sets represented as fuzzy numbers. The fuzzy number is represented by the R package FuzzyNumbers . Each fuzzy set represents a possible characterization (class) of the fuzzy phenomenon and its meanings is identified by a corresponding entry in classes . This policy returns a data frame containing the following columns: x and y are the same points from the data . i columns of numerical values, where i is the number of classes contained in fuzzysets and classes . The name of these columns are the names contained in classes . Each column has the membership point of ( x , y ) at the corresponding fuzzy number representing the class.","title":"Fuzzy Set Policy"},{"location":"building_fuzzy_regions/building_plateau_regions/#fuzzy_clustering_policy","text":"This policy is implemented by the function fuzzyclusteringpolicy , which has the following required parameters: data : It is a data frame composed of three columns, x , y , and z . The columns x and y defines the point of the geographical location, whereas z specifies the numerical value associated to the point. method : It defines the fuzzy clustering algorithm to be employed in the policy. Currently, it can only assume the following values: (i) cmeans , which specifies the use of the fuzzy c-means , and (ii) cshell , which specifies the use of the fuzzy c-shell . These methods are implemented by the R package e1071 . sclus : It is a Boolean value that specifies whether the coordinates x and y are also used by the fuzzy clustering algorithm ( true ) or not ( false ). k : It specifies the number of groups to be created. iter : The number of iterations to be processed by the fuzzy clustering algorithm. This policy returns a data frame containing the following columns: x and y are the same points from the data . k columns of numerical values, where k is the number of groups specifies when executing the policy. The user should analyze the returning data in order to specify the meaning of each group.","title":"Fuzzy Clustering Policy"},{"location":"building_fuzzy_regions/building_plateau_regions/#fuzzy_classification_policy","text":"To be specified.","title":"Fuzzy Classification Policy"},{"location":"building_fuzzy_regions/building_plateau_regions/#construction_stage","text":"The construction stage integrates the result obtained by the execution of the fuzzification stage with the application of spatial algorithms to group points with similar characteristics. This integration leads to the creation of plateau region objects. In our implementation, we provide the following policies: Voronoi Diagram Policy Delaunay Triangulation Policy Convex Hull Policy","title":"Construction Stage"},{"location":"building_fuzzy_regions/building_plateau_regions/#voronoi_diagram_policy","text":"This policy is implemented by the function voronoidiagrampolicy (with dependency of the R packages deldir , sp , and rgeos ), which has the following required parameters: lp : It is the data frame returned by a fuzzification policy of the fuzzification stage. Therefore, the structure of this data frame should not be modified (but you can modifiy, for example, the name of the columns). c : It consists of a list of classes that identicates the meaning of each column, after the columns x and y , of the lp . For instance, it corresponds to classes if you use the fuzzy set policy, and it corresponds to the name of the generated k groups of the fuzzy clustering policy. basepoly : It specifies the polygon in which the points are contained. It is employed to establish the boundary limits of the voronoi cells. refin : It specifies if the voronoi cells should be inside the basepoly only ( false ). Otherwise ( true and its default value), the voronoi cell intersecting the basepoly are refined by using the intersection operation between the voronoi cell and the basepoly ; it may require more processing time. This policy returns a matrix containing the following columns: c is the same classes specified by c . another column that represents the plateau region object representing a specific class.","title":"Voronoi Diagram Policy"},{"location":"building_fuzzy_regions/building_plateau_regions/#delaunay_triangulation_policy","text":"This policy is implemented by the function delaunaytriangulationpolicy (with dependency of the R packages deldir , sp , which has the following required parameters: lp : It is the data frame returned by a fuzzification policy of the fuzzification stage. Therefore, the structure of this data frame should not be modified (but you can modifiy, for example, the name of the columns). c : It consists of a list of classes that identicates the meaning of each column, after the columns x and y , of the lp . For instance, it corresponds to classes if you use the fuzzy set policy, and it corresponds to the name of the generated k groups of the fuzzy clustering policy. basepoly : It specifies the polygon in which the points are contained. It is employed to establish the boundary limits of the triangles. refin : It specifies if the triangles should be inside the basepoly only ( false ). Otherwise ( true and its default value), the triangles intersecting the basepoly are refined by using the intersection operation between the voronoi cell and the basepoly ; it may require more processing time. This policy returns a matrix containing the following columns: c is the same classes specified by c . another column that represents the plateau region object representing a specific class.","title":"Delaunay Triangulation Policy"},{"location":"building_fuzzy_regions/building_plateau_regions/#convex_hull_policy","text":"To be specified.","title":"Convex Hull Policy"},{"location":"building_fuzzy_regions/building_plateau_regions/#running_example","text":"We have employed this implementation to extract plateau region objects from a real-world data set representing the average temperature for the year 1970-2000. This data set can be downloaded at World Clim Version 2 . We are preparing the step-by-step of this running example.","title":"Running Example"}]}